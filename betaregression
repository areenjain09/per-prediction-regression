# install.packages("betareg") # if needed
library(betareg)

# Load
df <- read.csv("C:/Users/parul/Downloads/dataset/models.csv", stringsAsFactors = FALSE)

# Peek at exact column names you have
cat("Columns in your data:\n")
print(names(df))

# Smithson–Verkuilen adjustment so y ∈ (0,1)
n <- nrow(df)
df$PER_normalized_adj <- (df$PER_normalized * (n - 1) + 0.5) / n

# Candidate predictors (some may not exist; we'll check)
predictors <- c(
  "HGT","WGT","BMI","WNGSPN","STNDVERT","LPVERT",      # physicals
  "LANE","SPRINT",                                     # drills
  "PPG","RPG","APG","MPG",                             # per-game box score
  "FG%","3P%","FT%", "POS",
  "FG","FGA"
)

# Keep only those that actually exist in your data
found   <- intersect(predictors, names(df))
missing <- setdiff(predictors, names(df))

if (length(missing) > 0) {
  cat("\nMissing (not found in your file):\n")
  print(missing)
}
cat("\nUsing predictors:\n")
print(found)

# Build a formula that safely backticks special names (like FG%)
rhs <- paste(sprintf("`%s`", found), collapse = " + ")
form_big <- as.formula(paste("PER_normalized_adj ~", rhs))

# Restrict to complete cases on the predictors we found
keep <- complete.cases(df[, found, drop = FALSE])
model_data <- df[keep, c("PER_normalized_adj", found), drop = FALSE]

# Ensure POS (if present) is a factor
if ("POS" %in% names(model_data) && !is.factor(model_data$POS)) {
  model_data$POS <- factor(model_data$POS)
}

# Fit
fit_big <- betareg(form_big, data = model_data, link = "logit")
summary(fit_big)

# --------- Optional: standardized version (numeric columns only) ----------
model_data_sc <- model_data
pred_cols <- setdiff(colnames(model_data_sc), "PER_normalized_adj")
num_cols  <- pred_cols[sapply(model_data_sc[pred_cols], is.numeric)]
non_num_cols <- setdiff(pred_cols, num_cols)
if (length(non_num_cols) > 0) {
  cat("\nNote: The following non-numeric predictors will NOT be scaled:",
      paste(non_num_cols, collapse = ", "), "\n")
}
model_data_sc[num_cols] <- lapply(model_data_sc[num_cols], scale)

fit_big_sc <- betareg(form_big, data = model_data_sc, link = "logit")
summary(fit_big_sc)
# -------------------------------------------------------------------------
# --- Metrics (AICc, AIC, BIC, phi, etc.) ---

library(xtable)

# LogLik, k = # estimated parameters (mean + precision), n = # obs
ll  <- as.numeric(logLik(fit_big))
k   <- attr(logLik(fit_big), "df")
n_o <- nobs(fit_big)

# Information criteria (negative values can be perfectly valid)
aic <- as.numeric(AIC(fit_big))
bic <- as.numeric(BIC(fit_big))

# AICc (guard for n - k - 1 <= 0)
aicc <- if (n_o - k - 1 > 0) aic + (2 * k * (k + 1)) / (n_o - k - 1) else NA_real_

# Pseudo R^2
pseudo_r2 <- summary(fit_big)$pseudo.r.squared

# Precision parameter (phi) -- FIXED
phi <- unname(coef(fit_big, model = "precision"))  # length-1 numeric "(phi)"

# Number of players among rows used in the model
n_players <- if ("Player" %in% names(df)) length(unique(df$Player[keep])) else NA_integer_

# Table for LaTeX
performance_metrics_df <- data.frame(
  Metric = c(
    "Log-Likelihood",
    "Akaike Information Criterion (AIC)",
    "Corrected AIC (AICc)",
    "Bayesian Information Criterion (BIC)",
    "Pseudo R-squared",
    "Precision Parameter (Phi)",
    "Number of Observations",
    "Number of Players"
  ),
  Value = c(
    sprintf("%.1f", ll),
    sprintf("%.1f", aic),
    ifelse(is.na(aicc), "NA", sprintf("%.1f", aicc)),
    sprintf("%.1f", bic),
    sprintf("%.3f", pseudo_r2),
    sprintf("%.2f", phi),
    as.character(n_o),
    as.character(n_players)
  ),
  stringsAsFactors = FALSE
)

latex_table_code_performance <- print(
  xtable(performance_metrics_df,
         caption = "Performance Metrics for the Beta Regression Model",
         label = "tab:beta_performance"),
  type = "latex",
  booktabs = TRUE,
  caption.placement = "top",
  include.rownames = FALSE,
  sanitize.text.function = identity
)

cat("---- START LATEX PERFORMANCE TABLE CODE ----\n")
cat(latex_table_code_performance, sep = "\n")
cat("---- END LATEX PERFORMANCE TABLE CODE ----\n")



